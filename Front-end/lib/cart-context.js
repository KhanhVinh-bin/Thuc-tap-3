"use client"

import { createContext, useContext, useEffect, useState } from "react"

const CartContext = createContext()

export function CartProvider({ children }) {
  const [cart, setCart] = useState([])

  // üîπ Load gi·ªè h√†ng t·ª´ localStorage
  useEffect(() => {
    if (typeof window !== "undefined") {
      const savedCart = localStorage.getItem("cart")
      if (savedCart) {
        setCart(JSON.parse(savedCart))
      }
    }
  }, [])

  // üîπ L∆∞u gi·ªè h√†ng v√†o localStorage khi thay ƒë·ªïi
  useEffect(() => {
    if (typeof window !== "undefined") {
      localStorage.setItem("cart", JSON.stringify(cart))
    }
  }, [cart])

  // ‚ûï Th√™m kh√≥a h·ªçc v√†o gi·ªè
  const addToCart = (course) => {
    setCart((prev) => {
      const already = prev.find((item) => item.id === course.id)
      if (already) return prev
      return [...prev, course]
    })
  }

  // ‚ùå X√≥a kh√≥a h·ªçc kh·ªèi gi·ªè
  const removeFromCart = (id) => {
    setCart((prev) => prev.filter((item) => item.id !== id))
  }

  // üîé Ki·ªÉm tra xem kh√≥a h·ªçc c√≥ trong gi·ªè kh√¥ng
  const isInCart = (id) => {
    return cart.some((item) => item.id === id)
  }

  // üî¢ ƒê·∫øm t·ªïng s·ªë item trong gi·ªè
  const getCartItemsCount = () => {
    return cart.length
  }

  // üí∞ T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng
  const getCartTotal = () => {
    return cart.reduce((total, item) => total + (item.price || 0), 0)
  }

  // üßπ X√≥a to√†n b·ªô gi·ªè
  const clearCart = () => {
    setCart([])
  }

  const value = {
    cart,
    addToCart,
    removeFromCart,
    isInCart,
    getCartItemsCount,
    getCartTotal, // ‚ö° th√™m d√≤ng n√†y
    clearCart,
  }

  return <CartContext.Provider value={value}>{children}</CartContext.Provider>
}

export function useCart() {
  return useContext(CartContext)
}
