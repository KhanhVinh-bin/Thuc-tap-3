"use client"

import { useEffect, useState } from "react"
import Header from "@/components/header"
import Footer from "@/components/footer"
import { Users, Target, Award, TrendingUp } from "lucide-react"

const stats = [
  { icon: Users, label: "H·ªçc vi√™n", value: "1000+", color: "text-[#7c3aed]" },
  { icon: Target, label: "Kh√≥a h·ªçc", value: "100+", color: "text-[#06b6d4]" },
  { icon: Award, label: "Gi·∫£ng vi√™n", value: "4", color: "text-[#10b981]" },
  { icon: TrendingUp, label: "T·ª∑ l·ªá ho√†n th√†nh", value: "36%", color: "text-[#fbbf24]" },
]

const team = [
  {
    name: "Nguy·ªÖn H·∫£i Tr∆∞·ªùng",
    role: "CEO & Founder",
    image: "/haitruong.jpg",
    bio: "Senior Frontend Developer v·ªõi 800+ nƒÉm kinh nghi·ªám",
  },
  {
    name: "Tr·∫ßn VƒÉn Ho√†ng",
    role: "CTO",
    image: "/team-1.jpg",
    bio: "Chuy√™n gia v·ªÅ TRAE AI v√† Machine Learning",
  },
  {
    name: "Nguy·ªÖn H·ªØu T√†i",
    role: "Head of Education",
    image: "/team-4.jpg",
    bio: "15 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c C++",
  },
  {
    name: "Tr·∫ßn C√¥ng Ho√†ng Ph√∫c",
    role: "Lead Instructor",
    image: "/team-4.jpg",
    bio: "Full-stack Developer v√† gi·∫£ng vi√™n h√†ng ƒë·∫ßu",
  },
]

const values = [
  {
    title: "Ch·∫•t l∆∞·ª£ng",
    description: "Cam k·∫øt mang ƒë·∫øn n·ªôi dung h·ªçc t·∫≠p ch·∫•t l∆∞·ª£ng cao nh·∫•t",
    icon: "üéØ",
  },
  {
    title: "ƒê·ªïi m·ªõi",
    description: "Lu√¥n c·∫≠p nh·∫≠t c√¥ng ngh·ªá v√† ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y m·ªõi nh·∫•t",
    icon: "üí°",
  },
  {
    title: "C·ªông ƒë·ªìng",
    description: "X√¢y d·ª±ng c·ªông ƒë·ªìng h·ªçc t·∫≠p nƒÉng ƒë·ªông v√† h·ªó tr·ª£ l·∫´n nhau",
    icon: "ü§ù",
  },
  {
    title: "Ti·∫øp c·∫≠n",
    description: "Gi√°o d·ª•c ch·∫•t l∆∞·ª£ng cao cho m·ªçi ng∆∞·ªùi, m·ªçi n∆°i",
    icon: "üåç",
  },
]

export default function AboutPage() {
  const [lightboxImage, setLightboxImage] = useState(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("visible")
          }
        })
      },
      { threshold: 0.1 },
    )

    const elements = document.querySelectorAll(".fade-in-element")
    elements.forEach((el) => observer.observe(el))

    return () => observer.disconnect()
  }, [])

  // ƒê√≥ng lightbox khi nh·∫•n ph√≠m ESC
  useEffect(() => {
    const onKeyDown = (e) => {
      if (e.key === "Escape") setLightboxImage(null)
    }
    window.addEventListener("keydown", onKeyDown)
    return () => window.removeEventListener("keydown", onKeyDown)
  }, [])

  return (
    <div className="min-h-screen bg--50">
      <Header />

      {/* Hero Section */}
      <section className="bg-[#6A5BF6] py-20 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl md:text-5xl font-bold text-white mb-6">V·ªÅ EduLearn</h1>
            <p className="text-xl text-white/90 max-w-3xl mx-auto leading-relaxed">
              N·ªÅn t·∫£ng h·ªçc tr·ª±c tuy·∫øn h√†ng ƒë·∫ßu Vi·ªát Nam, mang ƒë·∫øn gi√°o d·ª•c ch·∫•t l∆∞·ª£ng cao v√† c∆° h·ªôi ph√°t tri·ªÉn cho m·ªçi
              ng∆∞·ªùi.
            </p>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            {stats.map((stat, index) => (
              <div key={index} className="text-center fade-in-element" style={{ animationDelay: `${index * 0.1}s` }}>
                <div className="flex justify-center mb-4">
                  <div
                    className={`w-16 h-16 ${stat.color} bg-opacity-10 rounded-full flex items-center justify-center`}
                  >
                    <stat.icon className={`w-8 h-8 ${stat.color}`} />
                  </div>
                </div>
                <div className="text-3xl font-bold text-white-900 mb-2">{stat.value}</div>
                <div className="text-white-600">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Mission Section */}
      <section className="py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <div className="fade-in-element">
              <h2 className="text-3xl font-bold text-white-900 mb-6">S·ª© m·ªánh c·ªßa ch√∫ng t√¥i</h2>
              <p className="text-lg text-white-600 mb-4 leading-relaxed">
                EduLearn ƒë∆∞·ª£c th√†nh l·∫≠p v·ªõi s·ª© m·ªánh d√¢n ch·ªß h√≥a gi√°o d·ª•c, mang ki·∫øn th·ª©c ch·∫•t l∆∞·ª£ng cao ƒë·∫øn v·ªõi m·ªçi
                ng∆∞·ªùi, m·ªçi n∆°i. Ch√∫ng t√¥i tin r·∫±ng gi√°o d·ª•c l√† ch√¨a kh√≥a ƒë·ªÉ m·ªü ra c∆° h·ªôi v√† thay ƒë·ªïi cu·ªôc s·ªëng.
              </p>
              <p className="text-lg text-white-600 leading-relaxed">
                V·ªõi ƒë·ªôi ng≈© gi·∫£ng vi√™n gi√†u kinh nghi·ªám v√† n·ªÅn t·∫£ng c√¥ng ngh·ªá hi·ªán ƒë·∫°i, ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i
                nghi·ªám h·ªçc t·∫≠p t·ªët nh·∫•t, gi√∫p h·ªçc vi√™n ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u ngh·ªÅ nghi·ªáp v√† ph√°t tri·ªÉn b·∫£n th√¢n.
              </p>
            </div>
            <div className="fade-in-element">
              <img src="/collaborative-teamwork.png" alt="Mission" className="rounded-xl shadow-lg" />
            </div>
          </div>
        </div>
      </section>

      {/* Values Section */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl font-bold text-white-900 mb-12 text-center">Gi√° tr·ªã c·ªët l√µi</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {values.map((value, index) => (
              <div
                key={index}
                className="fade-in-element bg-white-50 p-6 rounded-xl hover:shadow-lg transition-shadow"
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <div className="text-4xl mb-4">{value.icon}</div>
                <h3 className="text-xl font-bold text-white-900 mb-3">{value.title}</h3>
                <p className="text-white-600">{value.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Team Section */}
      <section className="py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 className="text-3xl font-bold text-white-900 mb-12 text-center">ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {team.map((member, index) => (
              <div
                key={index}
                className="fade-in-element bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-xl transition-all card-hover"
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <div className="relative h-64 bg-white-200">
                  <img
                    src={member.image || "/placeholder.svg"}
                    alt={member.name}
                    className="w-full h-full object-cover cursor-zoom-in transition-transform duration-300 hover:scale-105"
                    onClick={() =>
                      setLightboxImage(member.image || "/professional-portrait.png")
                    }
                    onError={(e) => {
                      e.target.src = "/professional-portrait.png"
                    }}
                  />
                </div>
                <div className="p-6">
                  <h3 className="text-xl font-bold text-white-900 mb-1">{member.name}</h3>
                  <p className="text-[#7c3aed] font-semibold mb-3">{member.role}</p>
                  <p className="text-white-600 text-sm">{member.bio}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Lightbox Overlay */}
      {lightboxImage && (
        <div
          className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center"
          onClick={() => setLightboxImage(null)}
        >
          <img
            src={lightboxImage}
            alt="Xem ·∫£nh l·ªõn"
            className="max-w-[90vw] max-h-[85vh] object-contain rounded-lg shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          />
          <button
            className="absolute top-4 right-4 bg-white/90 text-black px-4 py-2 rounded-lg hover:bg-white"
            onClick={() => setLightboxImage(null)}
          >
            ƒê√≥ng
          </button>
        </div>
      )}

      {/* CTA Section */}
      <section className="bg-gradient-to-r from-[#7c3aed] to-[#06b6d4] py-16">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold text-white mb-4">B·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc t·∫≠p ngay h√¥m nay</h2>
          <p className="text-white/90 mb-8 text-lg">
            Tham gia c√πng h√†ng ngh√¨n h·ªçc vi√™n ƒë√£ thay ƒë·ªïi cu·ªôc s·ªëng v·ªõi EduLearn
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <a
              href="/courses"
              className="px-8 py-3 bg-white text-[#7c3aed] font-semibold rounded-lg hover:bg-white-100 transition-colors"
            >
              Kh√°m ph√° kh√≥a h·ªçc
            </a>
            <a
              href="/register"
              className="px-8 py-3 bg-transparent border-2 border-white text-white font-semibold rounded-lg hover:bg-white hover:text-[#7c3aed] transition-colors"
            >
              ƒêƒÉng k√Ω ngay
            </a>
          </div>
        </div>
      </section>

      <Footer />
    </div>
  )
}
