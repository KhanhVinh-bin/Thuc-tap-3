'use client';

import React, { useState, useEffect, useMemo } from 'react';
import Link from 'next/link';
import { useSearchParams, useRouter } from 'next/navigation';
import AdminLayout from '../../components/AdminLayout'; // b·ªè ƒë·ªÉ tr√°nh ƒë√® layout
import './chitietkhoahoc.css';

// ƒê·∫£m b·∫£o API_BASE ƒë√∫ng v·ªõi c·∫•u h√¨nh backend (kh√¥ng d√πng ti·ªÅn t·ªë /api)
const API_BASE = 'https://localhost:7166/admin';
// Backup URL n·∫øu c·∫ßn thi·∫øt
const BACKUP_API_BASE = 'http://localhost:5000/admin';

export default function ChiTietKhoaHoc() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const courseId = searchParams.get('id');
  const [courseData, setCourseData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const token = useMemo(() => {
    try {
      return (
        localStorage.getItem('admin_token') ||
        sessionStorage.getItem('admin_token') ||
        localStorage.getItem('token') ||
        sessionStorage.getItem('token') ||
        localStorage.getItem('auth_token') ||
        ''
      );
    } catch {
      return '';
    }
  }, []);

  const apiFetch = async (path, options = {}, useBackup = false) => {
    try {
      const baseUrl = useBackup ? BACKUP_API_BASE : API_BASE;
      console.log(`üîç G·ª≠i request ƒë·∫øn: ${baseUrl}${path}`);
      console.log('üîë Token:', token ? 'C√≥ token' : 'Kh√¥ng c√≥ token');
      
      // Th√™m log ƒë·ªÉ debug
      console.log(`üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn API: ${baseUrl}${path}`);
      
      const res = await fetch(`${baseUrl}${path}`, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...(token ? { Authorization: `Bearer ${token}` } : {}),
          ...(options.headers || {}),
        },
        cache: 'no-store',
        // Th√™m credentials ƒë·ªÉ ƒë·∫£m b·∫£o cookie ƒë∆∞·ª£c g·ª≠i ƒëi
        credentials: 'include',
      });
      
      console.log(`üìä Status code: ${res.status}`);
      console.log(`üìã Response headers:`, Object.fromEntries([...res.headers.entries()]));
      
      if (res.status === 401 || res.status === 403) {
        console.error('‚õî L·ªói x√°c th·ª±c:', res.status);
        return null;
      }
      
      const contentType = res.headers.get('content-type') || '';
      let data = null;
      if (contentType.includes('application/json')) {
        data = await res.json().catch((err) => {
          console.error('‚ùå JSON parse error:', err);
          return null;
        });
      }
      if (!res.ok) {
        console.error('‚ùå API Error:', res.status, data);
        return null;
      }
      console.log('‚úÖ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Fetch error:', error);
      
      // N·∫øu l·ªói k·∫øt n·ªëi v√† ch∆∞a d√πng backup URL, th·ª≠ l·∫°i v·ªõi backup URL
      if (!useBackup && error.message && (error.message.includes('Failed to fetch') || error.message.includes('Network Error'))) {
        console.log('üîÑ Th·ª≠ l·∫°i v·ªõi backup URL');
        return apiFetch(path, options, true);
      }
      
      return null;
    }
  };

  useEffect(() => {
    const fetchCourseDetail = async (retryCount = 0) => {
      if (!courseId) {
        setError('Kh√¥ng t√¨m th·∫•y ID kh√≥a h·ªçc');
        setLoading(false);
        return;
      }

      setLoading(true);
      try {
        // Th·ª≠ l·∫•y d·ªØ li·ªáu t·ª´ API (ƒë∆∞·ªùng d·∫´n chu·∫©n /api/admin/courses/:id)
        const apiData = await apiFetch(`/courses/${courseId}`);

        if (apiData) {
          console.log('‚úÖ D·ªØ li·ªáu t·ª´ API:', apiData);
          const normalized = {
            id: apiData.ID ?? apiData.id ?? null,
            tieuDe: apiData.TieuDe ?? apiData.tieuDe ?? '',
            moTa: apiData.MoTa ?? apiData.moTa ?? '',
            danhMuc: apiData.DanhMuc ?? apiData.danhMuc ?? null,
            giangVien: apiData.GiangVien ?? apiData.giangVien ?? null,
            gia: apiData.Gia ?? apiData.gia ?? null,
            trangThai: apiData.TrangThai ?? apiData.status ?? apiData.trangThai ?? null,
            createdAt: apiData.CreatedAt ?? apiData.createdAt ?? null,
            updatedAt: apiData.UpdatedAt ?? apiData.updatedAt ?? null,
            hocVienDangKy: (apiData.HocVienDangKy ?? apiData.hocVienDangKy) || [],
            doanhThu: apiData.DoanhThu ?? apiData.doanhThu ?? null,
          };
          setCourseData(normalized);
        } else {
          // D·ªØ li·ªáu m·∫´u ƒë·ªÉ hi·ªÉn th·ªã khi API kh√¥ng ho·∫°t ƒë·ªông
          const mockData = {
            id: 1,
            tieuDe: "Kho√° L·∫≠p Tr√¨nh Web: HTML/CSS/JS t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao",
            moTa: "Kh√≥a h·ªçc th·ª±c h√†nh x√¢y d·ª±ng website, l√†m project th·ª±c t·∫ø, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi.",
            danhMuc: "L·∫≠p tr√¨nh",
            giangVien: "L√™ Th·ªã Linh",
            gia: 499000,
            trangThai: "published",
            createdAt: "2025-10-20T12:16:49.092",
            updatedAt: null,
            hocVienDangKy: [
              {
                userId: 4,
                hoTen: "H·ªì Kh√°nh",
                email: "khanh.ho@student.vn",
                ngayDangKy: "2025-10-20T12:16:49.111",
                trangThaiDangKy: "active"
              },
              {
                userId: 5,
                hoTen: "Nguy·ªÖn Th·ªã H√≤a",
                email: "hoa.nguyen@student.vn",
                ngayDangKy: "2025-10-20T12:16:49.111",
                trangThaiDangKy: "active"
              }
            ],
            doanhThu: 998000
          };
          
          // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u ƒë·ªÉ hi·ªÉn th·ªã
          console.log('‚ö†Ô∏è S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u ƒë·ªÉ hi·ªÉn th·ªã');
          setCourseData(mockData);
        }
      } catch (err) {
        console.error('‚ùå L·ªói khi t·∫£i th√¥ng tin kh√≥a h·ªçc:', err);
        setError(`L·ªói: ${err.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin kh√≥a h·ªçc'}`);
      } finally {
        setLoading(false);
      }
    };

    fetchCourseDetail();
  }, [courseId]);

  return (
    <>
      <div className="course-detail-container">
        {/* Header theo thi·∫øt k·∫ø chi ti·∫øt gi·∫£ng vi√™n */}
        <div className="top-navigation">
          <button className="back-button" onClick={() => router.push('/admin/khoahoc')}>
            ‚Üê Quay l·∫°i danh s√°ch
          </button>
          <div className="page-title">
            <h1>Chi ti·∫øt kh√≥a h·ªçc</h1>
            <p>Th√¥ng tin chi ti·∫øt v√† th·ªëng k√™ c·ªßa kh√≥a h·ªçc</p>
          </div>
        </div>

        {error ? (
          <div className="error-message">{error}</div>
        ) : courseData ? (
          <div className="content-grid">
            {/* Left Column - Course Info */}
            <div className="course-info-column">
              <div className="course-info-card">
                <div className="course-header">
                  <h2>Th√¥ng tin kh√≥a h·ªçc</h2>
                </div>
                
                <div className="course-title-section">
                  <h3>{courseData.tieuDe}</h3>
                  <p className="course-description">
                    {courseData.moTa}
                  </p>
                </div>

                <div className="course-details-grid">
                  <div className="detail-row">
                    <span className="label">M√£ kh√≥a h·ªçc</span>
                    <span className="value">{courseData.id}</span>
                  </div>
                  
                  <div className="detail-row">
                    <span className="label">Tr·∫°ng th√°i</span>
                    <span className={`status-badge ${courseData.trangThai === 'active' || courseData.trangThai === 'published' ? 'active' : courseData.trangThai === 'pending' ? 'pending' : 'inactive'}`}>
                      {courseData.trangThai}
                    </span>
                  </div>
                  
                  <div className="detail-row">
                    <span className="label">Danh m·ª•c</span>
                    <span className="value">{courseData.danhMuc || 'Ch∆∞a ph√¢n lo·∫°i'}</span>
                  </div>
                  
                  <div className="detail-row">
                    <span className="label">S·ªë h·ªçc vi√™n</span>
                    <span className="value">{courseData.hocVienDangKy?.length || 0} h·ªçc vi√™n</span>
                  </div>
                  
                  <div className="detail-row">
                    <span className="label">Ng√†y t·∫°o</span>
                    <span className="value">{courseData.createdAt ? new Date(courseData.createdAt).toLocaleDateString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                  </div>
                  
                  <div className="detail-row">
                    <span className="label">C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</span>
                    <span className="value">{courseData.updatedAt ? new Date(courseData.updatedAt).toLocaleDateString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                  </div>
                </div>

                <div className="instructor-section">
                  <span className="label">Gi·∫£ng vi√™n ph·ª• tr√°ch</span>
                  <div className="instructor-info">
                    <img src="/placeholder-user.jpg" alt="Instructor" className="instructor-avatar" />
                    <div className="instructor-details">
                      <span className="instructor-name">{courseData.giangVien || 'Ch∆∞a ph√¢n c√¥ng'}</span>
                    </div>
                  </div>
                </div>

                <div className="pricing-section">
                  <div className="price-row">
                    <span className="label">Gi√° kh√≥a h·ªçc</span>
                    <span className="value price">{courseData.gia?.toLocaleString('vi-VN')} VNƒê</span>
                  </div>
                  <div className="price-row">
                    <span className="label">Doanh thu</span>
                    <span className="value price">{courseData.doanhThu?.toLocaleString('vi-VN')} VNƒê</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Right Column - Students */}
            <div className="students-column">
              <div className="students-card">
                <div className="students-header">
                  <h2>Danh s√°ch h·ªçc vi√™n ({courseData.hocVienDangKy?.length || 0})</h2>
                </div>
                
                <div className="students-table-container">
                  <table className="table">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>H·ªç t√™n</th>
                        <th>Email</th>
                        <th>Ng√†y ƒëƒÉng k√Ω</th>
                        <th>Tr·∫°ng th√°i</th>
                      </tr>
                    </thead>
                    <tbody>
                      {courseData.hocVienDangKy && courseData.hocVienDangKy.length > 0 ? (
                        courseData.hocVienDangKy.map((student) => (
                          <tr key={student.userId}>
                            <td>{student.userId}</td>
                            <td>{student.hoTen}</td>
                            <td>{student.email}</td>
                            <td>{new Date(student.ngayDangKy).toLocaleDateString('vi-VN')}</td>
                            <td>
                              <span className={`status-badge ${student.trangThaiDangKy === 'active' ? 'active' : 'inactive'}`}>
                                {student.trangThaiDangKy}
                              </span>
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan="5" className="empty-table">Ch∆∞a c√≥ h·ªçc vi√™n ƒëƒÉng k√Ω</td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="not-found">Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√≥a h·ªçc</div>
        )}
      </div>
    </>
  );
}