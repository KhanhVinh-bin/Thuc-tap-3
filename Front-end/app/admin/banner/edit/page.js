'use client';

import React, { useEffect, useRef, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import './edit.css';
import Swal from 'sweetalert2';

export default function EditBanner() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const bannerId = searchParams.get('id');

  const fileInputRef = useRef(null);

  const API_BASE = 'https://localhost:7166';
  const getToken = () => (
    typeof window !== 'undefined'
      ? (
          localStorage.getItem('admin_token') ||
          sessionStorage.getItem('admin_token') ||
          localStorage.getItem('token') ||
          sessionStorage.getItem('token') ||
          localStorage.getItem('auth_token') ||
          ''
        )
      : null
  );

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');

  const [title, setTitle] = useState('');
  const [description, setDescription] = useState(''); // FE-only, kh√¥ng g·ª≠i BE
  const [position, setPosition] = useState('Trang ch·ªß');
  const [status, setStatus] = useState('ƒêang hi·ªÉn th·ªã');
  const [imageUrl, setImageUrl] = useState('');       // ·∫¢nh hi·ªán c√≥ t·ª´ BE
  const [imageFile, setImageFile] = useState(null);   // ·∫¢nh ch·ªçn m·ªõi t·ª´ m√°y
  const [imagePreview, setImagePreview] = useState(''); // dataURL ·∫£nh m·ªõi

  const mapPositionToLink = (pos) => {
    switch (pos) {
      case 'Kh√≥a h·ªçc':
        return '/courses';
      case 'Khuy·∫øn m√£i':
        return '/promo';
      default:
        return '/';
    }
  };

  const mapLinkToPosition = (linkUrl) => {
    if (!linkUrl) return 'Trang ch·ªß';
    const url = String(linkUrl).toLowerCase();
    if (url.includes('promo') || url.includes('sale') || url.includes('khuyen')) return 'Khuy·∫øn m√£i';
    if (url.includes('course')) return 'Kh√≥a h·ªçc';
    return 'Trang ch·ªß';
  };

  useEffect(() => {
    const loadDetail = async () => {
      if (!bannerId) {
        setError('Thi·∫øu tham s·ªë id c·ªßa banner.');
        setLoading(false);
        return;
      }
      try {
        const res = await fetch(`${API_BASE}/admin/banners/${bannerId}`, {
          headers: {
            'Accept': 'application/json',
            'Authorization': `Bearer ${getToken() || ''}`
          }
        });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();

        setTitle(data.title || '');
        setDescription(''); // Kh√¥ng c√≥ tr√™n BE, ƒë·ªÉ tr·ªëng theo UI
        setPosition(mapLinkToPosition(data.linkUrl));
        setStatus(data.isActive ? 'ƒêang hi·ªÉn th·ªã' : 'B·ªã ·∫©n'); // Theo ·∫£nh UI
        setImageUrl(data.imageUrl || '');
        setImagePreview(''); // Ch·ªâ hi·ªÉn th·ªã preview n·∫øu ch·ªçn ·∫£nh m·ªõi
      } catch (e) {
        console.error(e);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu banner.');
      } finally {
        setLoading(false);
      }
    };
    loadDetail();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [bannerId]);

  const handleChangeImageClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileSelected = (e) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setImageFile(file);
    const reader = new FileReader();
    reader.onload = (ev) => setImagePreview(ev.target.result);
    reader.readAsDataURL(file);
  };

  const handleRemoveImage = () => {
    setImageFile(null);
    setImagePreview('');
    // N·∫øu mu·ªën bu·ªôc ƒë·ªïi ·∫£nh, ta c≈©ng clear ·∫£nh c≈©:
    setImageUrl('');
  };

  const handleClose = () => {
    router.push('/admin/banner');
  };

  const handleSave = async () => {
    if (!title.trim()) {
      await Swal.fire({ title: 'L·ªói', text: 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ.', icon: 'error' });
      return;
    }
    // N·∫øu ƒë√£ x√≥a ·∫£nh c≈© v√† ch∆∞a ch·ªçn ·∫£nh m·ªõi -> b√°o l·ªói
    if (!imageUrl && !imageFile) {
      await Swal.fire({ title: 'L·ªói', text: 'Vui l√≤ng ch·ªçn ·∫£nh banner t·ª´ m√°y t√≠nh.', icon: 'error' });
      return;
    }

    const confirm = await Swal.fire({
      title: 'L∆∞u thay ƒë·ªïi?',
      text: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t banner n√†y?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'L∆∞u',
      cancelButtonText: 'H·ªßy'
    });
    if (!confirm.isConfirmed) return;

    setSaving(true);
    try {
      let finalImageUrl = imageUrl;

      // N·∫øu c√≥ ch·ªçn ·∫£nh m·ªõi th√¨ upload tr∆∞·ªõc
      if (imageFile) {
        const fd = new FormData();
        fd.append('file', imageFile);
        const up = await fetch(`${API_BASE}/admin/banners/upload-file`, {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${getToken() || ''}` },
          body: fd
        });
        if (!up.ok) {
          let msg = `HTTP ${up.status}`;
          try { const j = await up.json(); msg = j?.message || msg; } catch {}
          throw new Error(`Upload ·∫£nh th·∫•t b·∫°i: ${msg}`);
        }
        const upData = await up.json();
        finalImageUrl = upData?.imageUrl || '';
      }

      const payload = {
        title: title.trim(),
        imageUrl: finalImageUrl || undefined,
        linkUrl: mapPositionToLink(position),
        isActive: status === 'ƒêang hi·ªÉn th·ªã'
      };

      const res = await fetch(`${API_BASE}/admin/banners/${bannerId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${getToken() || ''}`
        },
        body: JSON.stringify(payload)
      });
      if (!res.ok) {
        let msg = `HTTP ${res.status}`;
        try { const j = await res.json(); msg = j?.message || msg; } catch { const t = await res.text().catch(() => ''); if (t) msg = t; }
        throw new Error(msg);
      }

      await Swal.fire({ title: 'Th√†nh c√¥ng', text: 'C·∫≠p nh·∫≠t banner th√†nh c√¥ng.', icon: 'success' });
      router.push('/admin/banner');
    } catch (e) {
      console.error(e);
      await Swal.fire({ title: 'L·ªói', text: e.message || 'Kh√¥ng th·ªÉ l∆∞u thay ƒë·ªïi.', icon: 'error' });
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return <div className="edit-loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  }
  if (error) {
    return (
      <div className="edit-error">
        {error}
        <button className="edit-btn-secondary" onClick={handleClose}>Quay l·∫°i</button>
      </div>
    );
  }

  return (
    <div className="edit-overlay">
      <div className="edit-modal">
        <div className="edit-header">
          <div>
            <h2 className="edit-title">S·ª≠a n·ªôi dung banner</h2>
            <p className="edit-subtitle">C·∫≠p nh·∫≠t th√¥ng tin banner</p>
          </div>
          <button className="edit-close" onClick={handleClose}>√ó</button>
        </div>

        <div className="edit-form">
          {/* Ti√™u ƒë·ªÅ */}
          <div className="edit-group">
            <label className="edit-label">Ti√™u ƒë·ªÅ <span className="req">*</span></label>
            <input
              className="edit-input"
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Kh√≥a h·ªçc React 2024 - Gi·∫£m gi√° 50%"
            />
          </div>

          {/* M√¥ t·∫£ (FE-only) */}
          <div className="edit-group">
            <label className="edit-label">M√¥ t·∫£ <span className="req">*</span></label>
            <textarea
              className="edit-textarea"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="H·ªçc React t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao v·ªõi gi·∫£ng vi√™n 10+ nƒÉm kinh nghi·ªám."
              rows={3}
            />
          </div>

          {/* ·∫¢nh banner */}
          <div className="edit-group">
            <label className="edit-label">H√¨nh ·∫£nh banner <span className="req">*</span></label>

            {(imagePreview || imageUrl) && (
              <div className="edit-image-preview">
                <img src={imagePreview || imageUrl} alt="Banner" />
                <button className="edit-image-remove" onClick={handleRemoveImage}>√ó</button>
              </div>
            )}

            <div className="edit-upload">
              <button type="button" className="edit-upload-btn" onClick={handleChangeImageClick}>
                <span className="edit-upload-icon">üì§</span>
                Thay ƒë·ªïi ·∫£nh
              </button>
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleFileSelected}
                style={{ display: 'none' }}
              />
            </div>
          </div>

          {/* V·ªã tr√≠ & Tr·∫°ng th√°i */}
          <div className="edit-row">
            <div className="edit-col">
              <label className="edit-label">V·ªã tr√≠ hi·ªÉn th·ªã <span className="req">*</span></label>
              <select className="edit-select" value={position} onChange={(e) => setPosition(e.target.value)}>
                <option value="Trang ch·ªß">Trang ch·ªß</option>
                <option value="Kh√≥a h·ªçc">Kh√≥a h·ªçc</option>
                <option value="Khuy·∫øn m√£i">Khuy·∫øn m√£i</option>
              </select>
            </div>
            <div className="edit-col">
              <label className="edit-label">Tr·∫°ng th√°i <span className="req">*</span></label>
              <select className="edit-select" value={status} onChange={(e) => setStatus(e.target.value)}>
                <option value="ƒêang hi·ªÉn th·ªã">ƒêang hi·ªÉn th·ªã</option>
                <option value="B·ªã ·∫©n">B·ªã ·∫©n</option>
              </select>
            </div>
          </div>

          {/* Action */}
          <div className="edit-actions">
            <button type="button" className="edit-btn-primary" onClick={handleSave} disabled={saving}>
              {saving ? 'ƒêang l∆∞u...' : 'L∆∞u thay ƒë·ªïi'}
            </button>
            <button type="button" className="edit-btn-secondary" onClick={handleClose}>ƒê√≥ng</button>
          </div>
        </div>
      </div>
    </div>
  );
}